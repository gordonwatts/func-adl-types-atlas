metadata:
  - name: sys_error_tool
    data:
      - metadata_type: add_job_script
        name: sys_error_tool
        script:
          - "# pulled from:https://gitlab.cern.ch/atlas/athena/-/blob/21.2/PhysicsAnalysis/Algorithms/JetAnalysisAlgorithms/python/JetAnalysisAlgorithmsTest.py "
          - "# Set up the systematics loader/handler service:"
          - "from AnaAlgorithm.DualUseConfig import createService"
          - "from AnaAlgorithm.AlgSequence import AlgSequence"
          - "calibrationAlgSeq = AlgSequence()"
          - "sysService = createService( 'CP::SystematicsSvc', 'SystematicsSvc', sequence = calibrationAlgSeq )"
          - "sysService.systematicsList = ['{calibration}']"
          - "# Add sequence to job"
  - name: pileup_tool
    data:
      - metadata_type: add_job_script
        name: pileup_tool
        script:
          - "from AsgAnalysisAlgorithms.PileupAnalysisSequence import makePileupAnalysisSequence"
          - "pileupSequence = makePileupAnalysisSequence( 'mc' )"
          - "pileupSequence.configure( inputName = {}, outputName = {} )"
          - "print( pileupSequence ) # For debugging"
          - "calibrationAlgSeq += pileupSequence"
        depends_on: 
          - sys_error_tool
  - name: common_corrections
    data:
      - metadata_type: add_job_script
        name: common_corrections
        script:
          - "jetContainer = '{calib.jet_collection}'"
          - "from JetAnalysisAlgorithms.JetAnalysisSequence import makeJetAnalysisSequence"
          - "jetSequence = makeJetAnalysisSequence( 'mc', jetContainer)"
          - "jetSequence.configure( inputName = jetContainer, outputName = jetContainer + '_Base_%SYS%' )"
          - "jetSequence.JvtEfficiencyAlg.truthJetCollection = '{calib.jet_calib_truth_collection}'"
          - "jetSequence.ForwardJvtEfficiencyAlg.truthJetCollection = '{calib.jet_calib_truth_collection}'"
          - "calibrationAlgSeq += jetSequence"
          - "print( jetSequence ) # For debugging"
          - ""
          - "# Include, and then set up the jet analysis algorithm sequence:"
          - "from JetAnalysisAlgorithms.JetJvtAnalysisSequence import makeJetJvtAnalysisSequence"
          - "jvtSequence = makeJetJvtAnalysisSequence( 'mc', jetContainer, enableCutflow=True )"
          - "jvtSequence.configure( inputName = {'jets'      : jetContainer + '_Base_%SYS%' },"
          - "                       outputName = { 'jets'      : jetContainer + 'Calib_%SYS%' },"
          - "                       )"
          - "calibrationAlgSeq += jvtSequence"
          - "print( jvtSequence ) # For debugging"
          - "#"
          - "muon_container = '{calib.muon_collection}'"
          - "from MuonAnalysisAlgorithms.MuonAnalysisSequence import makeMuonAnalysisSequence"
          - "muonSequence = makeMuonAnalysisSequence('mc', workingPoint='{calib.muon_working_point}.{calib.muon_isolation}', postfix = '{calib.muon_working_point}_{calib.muon_isolation}')"
          - "muonSequence.configure( inputName = muon_container,"
          - "                        outputName = muon_container + 'Calib_{calib.muon_working_point}{calib.muon_isolation}_%SYS%' )"
          - "calibrationAlgSeq += muonSequence"
          - "print( muonSequence ) # For debugging"
          - "#"
          - "from EgammaAnalysisAlgorithms.ElectronAnalysisSequence import makeElectronAnalysisSequence"
          - "electronSequence = makeElectronAnalysisSequence( 'mc', '{working_point}.{isolation}', postfix = '{working_point}_{isolation}')"
          - "electronSequence.configure( inputName = '{calib.electron_collection}',"
          - "                            outputName = '{calib.electron_collection}_{working_point}_{isolation}_%SYS%' )"
          - "calibrationAlgSeq += electronSequence"
          - "print( electronSequence ) # For debugging"
          - "#"
          - "from EgammaAnalysisAlgorithms.PhotonAnalysisSequence import makePhotonAnalysisSequence"
          - "photonSequence = makePhotonAnalysisSequence( 'mc', '{calib.photon_working_point}.{calib.photon_isolation}', postfix = '{calib.photon_working_point}_{calib.photon_isolation}')"
          - "photonSequence.configure( inputName = '{calib.photon_collection}',"
          - "                            outputName = '{calib.photon_collection}_{calib.photon_working_point}_{calib.photon_isolation}_%SYS%' )"
          - "calibrationAlgSeq += photonSequence"
          - "print( photonSequence ) # For debugging"
          - "#"
          - "from TauAnalysisAlgorithms.TauAnalysisSequence import makeTauAnalysisSequence"
          - "tauSequence = makeTauAnalysisSequence( 'mc', '{calib.tau_working_point}', postfix = '{calib.tau_working_point}', rerunTruthMatching=False)"
          - "tauSequence.configure( inputName = '{calib.tau_collection}',"
          - "                       outputName = '{calib.tau_collection}_{calib.tau_working_point}_%SYS%' )"
          - "calibrationAlgSeq += tauSequence"
          - "print( tauSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: ditau_corrections
    data:
      - metadata_type: add_job_script
        name: ditau_corrections
        script:
          - "from TauAnalysisAlgorithms.DiTauAnalysisSequence import makeDiTauAnalysisSequence"
          - "diTauSequence = makeDiTauAnalysisSequence( 'mc', '{working_point}', postfix = '{working_point}')"
          - "diTauSequence.configure( inputName = '{bank_name}',"
          - "                       outputName = '{bank_name}_{working_point}_%SYS%' )"
          - "calibrationAlgSeq += diTauSequence"
          - "print( diTauSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: add_calibration_to_job
    data:
      - metadata_type: add_job_script
        name: add_calibration_to_job
        script:
          - "calibrationAlgSeq.addSelfToJob( job )"
          - "print(job) # for debugging"
        depends_on:
          - '*PREVIOUS*'
