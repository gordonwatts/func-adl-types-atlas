metadata:
  - name: sys_error_tool
    data:
      - metadata_type: add_job_script
        name: sys_error_tool
        script:
          - "# pulled from:https://gitlab.cern.ch/atlas/athena/-/blob/21.2/PhysicsAnalysis/Algorithms/JetAnalysisAlgorithms/python/JetAnalysisAlgorithmsTest.py "
          - "# Set up the systematics loader/handler service:"
          - "from AnaAlgorithm.DualUseConfig import createService"
          - "from AnaAlgorithm.AlgSequence import AlgSequence"
          - "calibrationAlgSeq = AlgSequence()"
          - "sysService = createService( 'CP::SystematicsSvc', 'SystematicsSvc', sequence = calibrationAlgSeq )"
          - "sysService.systematicsList = ['{calibration}']"
          - "# Add sequence to job"
  - name: pileup_tool
    data:
      - metadata_type: add_job_script
        name: pileup_tool
        script:
          - "from AsgAnalysisAlgorithms.PileupAnalysisSequence import makePileupAnalysisSequence"
          - "from AsgAnalysisAlgorithms.AsgAnalysisAlgorithmsTest import pileupConfigFiles"
          - "prwfiles, lumicalcfiles = pileupConfigFiles('mc')"
          - "# Can't use pwrfiles, lumicalcfiles b.c. they are on cvms and docker does not have those."
          - "# pileupSequence = makePileupAnalysisSequence( 'mc', userPileupConfigs=prwfiles, userLumicalcFiles=lumicalcfiles)"
          - "pileupSequence = makePileupAnalysisSequence( 'mc' )"
          - "pileupSequence.configure( inputName = {}, outputName = {} )"
          - "# print( pileupSequence ) # For debugging"
          - "calibrationAlgSeq += pileupSequence"
        depends_on: 
          - sys_error_tool
  - name: jet_corrections
    data:
      - metadata_type: add_job_script
        name: jet_corrections
        script:
          - "jetContainer = '{bank_name}'"
          - "from JetAnalysisAlgorithms.JetAnalysisSequence import makeJetAnalysisSequence"
          - "jetSequence = makeJetAnalysisSequence( 'mc', jetContainer)"
          - "jetSequence.configure( inputName = jetContainer, outputName = '{bank_name}_Base_%SYS%' )"
          - "jetSequence.JvtEfficiencyAlg.truthJetCollection = '{truth_jets}'"
          - "jetSequence.ForwardJvtEfficiencyAlg.truthJetCollection = '{truth_jets}'"
          - "calibrationAlgSeq += jetSequence"
          - "print( jetSequence ) # For debugging"
          - ""
          - "# Include, and then set up the jet analysis algorithm sequence:"
          - "from JetAnalysisAlgorithms.JetJvtAnalysisSequence import makeJetJvtAnalysisSequence"
          - "jvtSequence = makeJetJvtAnalysisSequence( 'mc', jetContainer, enableCutflow=True )"
          - "jvtSequence.configure( inputName = {'jets'      : '{bank_name}_Base_%SYS%' },"
          - "                       outputName = { 'jets'      : '{bank_name}Calib_%SYS%' },"
          - "                       )"
          - "calibrationAlgSeq += jvtSequence"
          - "print( jvtSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: muon_corrections
    data:
      - metadata_type: add_job_script
        name: muon_corrections
        script:
          - "muon_container = '{bank_name}'"
          - "from MuonAnalysisAlgorithms.MuonAnalysisSequence import makeMuonAnalysisSequence"
          - "muonSequence = makeMuonAnalysisSequence('mc', workingPoint='{working_point}.{isolation}', postfix = '{working_point}_{isolation}')"
          - "muonSequence.configure( inputName = muon_container,"
          - "                        outputName = muon_container + 'Calib_{working_point}{isolation}_%SYS%' )"
          - "calibrationAlgSeq += muonSequence"
          - "print( muonSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: electron_corrections
    data:
      - metadata_type: add_job_script
        name: electron_corrections
        script:
          - "from EgammaAnalysisAlgorithms.ElectronAnalysisSequence import makeElectronAnalysisSequence"
          - "electronSequence = makeElectronAnalysisSequence( 'mc', '{working_point}.{isolation}', postfix = 'loose',"
          - "                                  recomputeLikelihood=True, enableCutflow=False, enableKinematicHistograms=False )"
          - "electronSequence.configure( inputName = '{bank_name}',"
          - "                            outputName = '{bank_name}_{working_point}{isolation}_%SYS%' )"
          - "calibrationAlgSeq += electronSequence"
          - "print( electronSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: tau_corrections
    data:
      - metadata_type: add_job_script
        name: tau_corrections
        script:
          - "from TauAnalysisAlgorithms.TauAnalysisSequence import makeTauAnalysisSequence"
          - "tauSequence = makeTauAnalysisSequence( 'mc', '{working_point}', postfix = '{working_point}')"
          - "tauSequence.configure( inputName = '{bank_name}',"
          - "                       outputName = '{bank_name}_{working_point}_%SYS%' )"
          - "calibrationAlgSeq += tauSequence"
          - "print( tauSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: ditau_corrections
    data:
      - metadata_type: add_job_script
        name: ditau_corrections
        script:
          - "from TauAnalysisAlgorithms.DiTauAnalysisSequence import makeDiTauAnalysisSequence"
          - "diTauSequence = makeDiTauAnalysisSequence( 'mc', '{working_point}', postfix = '{working_point}')"
          - "diTauSequence.configure( inputName = '{bank_name}',"
          - "                       outputName = '{bank_name}_{working_point}_%SYS%' )"
          - "calibrationAlgSeq += diTauSequence"
          - "print( diTauSequence ) # For debugging"
        depends_on:
          - 'pileup_tool'
  - name: add_calibration_to_job
    data:
      - metadata_type: add_job_script
        name: add_calibration_to_job
        script:
          - "calibrationAlgSeq.addSelfToJob( job )"
          - "print(job) # for debugging"
        depends_on:
          - '*PREVIOUS*'
